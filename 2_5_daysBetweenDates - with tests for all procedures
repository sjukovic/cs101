# By Websten from forums
#
# Given your birthday and the current date, calculate your age in days. 
# Compensate for leap days. 
# Assume that the birthday and current date are correct dates (and no time travel). 
# Simply put, if you were born 1 Jan 2012 and todays date is 2 Jan 2012 
# you are 1 day old.
#
# Hint
# A whole year is 365 days, 366 if a leap year.

def isLeapYear(year):
    
    if year % 400 == 0:
        return True
    if year % 100 == 0:
            return False
    if year % 4==0:
            return True
    return False

#test procedure test_isLeapYear()    
#def test_isLeapYear():
   # assert isLeapYear(2012)==True
   # assert isLeapYear(2013)==False
   # assert isLeapYear(2100)==False
   # assert isLeapYear(2000)==True
    
   # print "Test finished"
    
#test_isLeapYear()

    
def daysInMonth(year,month):
    days_in_month=[31,28,31,30,31,30,31,31,30,31,30,31]
    days_in_month_leap=[31,29,31,30,31,30,31,31,30,31,30,31]
    i=0
    while i < month:
        i=i+1
        if i==month:
            if not isLeapYear(year): #return number of days in month when not isLeapYear
                return days_in_month[i-1]
            else:
                return days_in_month_leap[i-1] #return number of days in month when isLeapYear
            
#def test_daysInMonth():
   # assert daysInMonth(2012,2)==29
   # assert daysInMonth(2013,2)==28
   # assert daysInMonth(2013,12)==31
   # assert daysInMonth(2000,2)==29
   # print "test finished, all months ok :)"
#test_daysInMonth()    

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < daysInMonth(year,month):
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1
        
#def test_nextDay():
#   assert nextDay(2013,2,28)==(2013,3,1)
#   assert nextDay(2012,4,30)==(2012,5,1)
#   print "Test finished!"
    
#test_nextDay()
        
def dateIsAfter(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is after year2-month2-day2.  Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False        

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert dateIsAfter(year1,month1,day1,year2,month2,day2)
    days = 0
    while dateIsAfter(year1, month1, day1, year2, month2, day2):
        days += 1
        (year1, month1, day1) = nextDay(year1, month1, day1)
    return days


#test daysBetweenDates procedure (args,answer)
def test():
    test_cases = [((2012,1,1,2012,2,28), 58), 
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()

